buildscript {
    ext {
        springBootVersion = "1.3.5.RELEASE"
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "com.blackbaud:gradle-internal:3.+"
        classpath "com.blackbaud:gradle-docker:1.+"
        classpath "com.blackbaud:gradle-templates:2.+"
    }
}

apply plugin: "blackbaud-internal-rest"
apply plugin: "docker"
apply plugin: "blackbaud-templates"
apply plugin: "spring-boot"

configurations {
    client
}

sourceSets {
    client {
        java {
            srcDir "src/main/java"
            include "com/blackbaud/deployment/api/**"
            include "com/blackbaud/deployment/client/**"
        }
    }
}

dependencies {
    compile "com.blackbaud:common-spring-boot-rest:${springBootVersion}-2.+"
    compile "com.blackbaud:common-spring-boot-persistence:${springBootVersion}-2.+"
    compile "postgresql:postgresql:9.0-801.jdbc4"
    compile "org.liquibase:liquibase-core"
    compile 'org.eclipse.jgit:org.eclipse.jgit:4.1.1.201511131810-r'
    compile 'org.eclipse.mylyn.github:org.eclipse.egit.github.core:2.1.5'

    clientCompile "com.blackbaud:common-spring-boot-rest:${springBootVersion}-2.+"

    mainTestCompile "com.blackbaud:common-test:1.+"
    mainTestCompile "org.codehaus.groovy:groovy-all:2.4.3"
    mainTestCompile ("org.spockframework:spock-spring:1.0-groovy-2.4") {
        exclude group: "org.codehaus.groovy"
    }
    testCompile ('org.spockframework:spock-spring:1.0-groovy-2.4') {
        exclude group: 'org.codehaus.groovy'
    }
    testCompile "org.springframework.boot:spring-boot-starter-test"

    componentTestCompile "org.springframework.boot:spring-boot-starter-test"
    componentTestCompile "com.blackbaud:common-spring-boot-rest-test:${springBootVersion}-2.+"
    componentTestCompile "cglib:cglib-nodep:2.2"
}

swagger {
    generateDocs
}

jar {
    metaInf {
        from 'src/deploy/cloudfoundry'
    }
}

publishing_ext {
    publication('client')
}

docker {
    container {
        imageName "postgres:9.4"
        publish "5432:5432"
        env "POSTGRES_USER=postgres"
        env "POSTGRES_PASSWORD=postgres"
    }
}

componentTest.dependsOn System.getenv("BUILD_NUMBER") ? refreshPostgres : startPostgres

jacocoAllReport {
    afterEvaluate {
        classDirectories = files(classDirectories.filter {
it.name != 'mainTest'
}.files.collect {
            fileTree(dir: it,
                     exclude: [ 
                                '**/api/**',
                                '**/core/domain/*Entity*',
                                '**/core/domain/*PrimaryKey*',
                                '**/config/**',
                     ])
        })
    }
}

def injectGithubCredentials = {
    if (!project.hasProperty('github.password') || !project.hasProperty('github.username')){
        throw new GradleException("Need to add -Pgithub.username={your username} -Pgithub.password={your password or access token} as a gradle arg")
    }
    else {
        systemProperties['github.password'] = project.ext['github.password']
        systemProperties['github.username'] = project.ext['github.username']
    }
}

bootRun {
    configure injectGithubCredentials
}

componentTest {
    configure injectGithubCredentials
}
